function [out] = QL2(Deci,info,freq,params)
%params.States = [20 21 23 24];
%params.Actions = [31 32];
%params.Reward  = [51 52];
%params.Value  = {[20 10] [10 0] [0 -10] [-10 -20]};

trialtypes = freq.condinfo{2}(info.alltrials & info.allnonnans,:);


%Basic Data Maintence for finding block numbers
if any(any(trialtypes < 0))
    blocknumbers = sort(unique(trialtypes(:,end)),'descend');
else
    blocknumbers = -1;
end

Values = any(ismember(trialtypes',params.States)');

%Sorting data into blcks
for blk = 1:length(blocknumbers)
    
    blkmrk = sum(ismember(trialtypes,[blocknumbers(blk)]),2) ==  1;
    
    Actmrk = logical(sum(ismember(trialtypes(blkmrk,:),[params.Actions]),1));
    Actions{blk} = trialtypes(blkmrk,Actmrk);
    
    Rewmrk = logical(sum(ismember(trialtypes(blkmrk,:),[params.Reward]),1));
    Rewards{blk} = trialtypes(blkmrk,Rewmrk);

    for rew = 1:length(params.Reward)
        Rewards{blk}(Rewards{blk} == params.Reward(rew)) = params.Value{Values}(rew);
    end

end

% Loop for running models 10 times with randomized starting conditinos


for init = 1:10
        
        Fit1.LB = [min([params.Value{:}]) min([params.Value{:}]) 0 1e-6];
        Fit1.UB = [max([params.Value{:}]) max([params.Value{:}]) 1 30];
        Fit1.init =rand(1,length(Fit1.LB)).*(Fit1.UB-Fit1.LB)+Fit1.LB;
        
        Fit2.LB = [min([params.Value{:}]) min([params.Value{:}]) 0 0 1e-6];
        Fit2.UB = [max([params.Value{:}]) max([params.Value{:}]) 1 1 30];
        Fit2.init =rand(1,length(Fit2.LB)).*(Fit2.UB-Fit2.LB)+Fit2.LB;
        
        Fit3.LB = [0 1e-6];
        Fit3.UB = [1 3];
        Fit3.init =rand(1,length(Fit3.LB)).*(Fit3.UB-Fit3.LB)+Fit3.LB;
    

        [Value{1,init}] = ...
            fmincon(@(x) SimpleQ([x(1) x(2)],Actions,Rewards,x(3),x(4)),...
            [Fit1.init],[],[],[],[],[Fit1.LB],[Fit1.UB],[],...
            optimset('TolX', 0.00001, 'TolFun', 0.00001, 'MaxFunEvals', 9e+9, 'Algorithm', 'interior-point','Display','off'));
        
        [LLE(1,init),qs{1,init},P{1,init},PE{1,init}] = SimpleQ([Value{1,init}(1) Value{1,init}(2)],Actions,Rewards, Value{1,init}(3),Value{1,init}(4));

        [Value{2,init}] = ...
            fmincon(@(x) FeedbackQ([x(1) x(2)],Actions,Rewards,x(3),x(4),x(5)),...
            [Fit2.init],[],[],[],[],[Fit2.LB],[Fit2.UB],[],...
            optimset('TolX', 0.00001, 'TolFun', 0.00001, 'MaxFunEvals', 9e+9, 'Algorithm', 'interior-point','Display','off'));
        
        [LLE(2,init),qs{2,init},P{2,init},PE{2,init}] = FeedbackQ([Value{2,init}(1) Value{2,init}(2)],Actions,Rewards, Value{2,init}(3),Value{2,init}(4),Value{2,init}(5));
         
        LLE2(:,init) = aicbic(-LLE(:,init),[4 5]);
        
                    [Value{1,init}] = ...
                fmincon(@(x) SimpleQ(q(init,:),Actions,Rewards,x(1),x(2)),...
                [Fit1.init],[],[],[],[],[Fit1.LB],[Fit1.UB],[],...
                optimset('TolX', 0.00001, 'TolFun', 0.00001, 'MaxFunEvals', 9e+9, 'Algorithm', 'interior-point','Display','off'));
            
            [LLE(1,init),qs{1,init},P{1,init},PE{1,init}] = SimpleQ(q(init,:),Actions,Rewards, Value{1,init}(1),Value{1,init}(2));
            
    
end
[Best,I] = min(LLE,[],2);
[Best2,I2] = min(LLE2,[],2);


for m = 1:size(Best,1)
    %out{1,m,blk} = Value{m,I(m,1)};
    QL{m} = Value{m,I2(m,1)};
    Q{m} = qs{m,I2(m,1)};
    Pe{m} = PE{m,I2(m,1)};
    PseudoR{m} = 1 - [-Best(m)/[length(cat(1,Actions{:}))*log(.05)]];
    AIC{m} = Best2(m);
end

out = {QL Q Pe PseudoR AIC};


warning('off', 'MATLAB:MKDIR:DirectoryExists');
mkdir([Deci.Folder.Analysis filesep 'Extra' filesep 'QL' filesep Deci.SubjectList{info.subject_list}  filesep filesep Deci.Analysis.LocksTitle{info.Lock}])
save([Deci.Folder.Analysis filesep 'Extra' filesep 'QL' filesep Deci.SubjectList{info.subject_list}  filesep filesep Deci.Analysis.LocksTitle{info.Lock} filesep Deci.Analysis.CondTitle{info.Cond}],'QL');

mkdir([Deci.Folder.Analysis filesep 'Extra' filesep 'Q' filesep Deci.SubjectList{info.subject_list}  filesep filesep Deci.Analysis.LocksTitle{info.Lock}])
save([Deci.Folder.Analysis filesep 'Extra' filesep 'Q' filesep Deci.SubjectList{info.subject_list}  filesep filesep Deci.Analysis.LocksTitle{info.Lock} filesep Deci.Analysis.CondTitle{info.Cond}],'Q');

mkdir([Deci.Folder.Analysis filesep 'Extra' filesep 'Pe' filesep Deci.SubjectList{info.subject_list}  filesep filesep Deci.Analysis.LocksTitle{info.Lock}])
save([Deci.Folder.Analysis filesep 'Extra' filesep 'Pe' filesep Deci.SubjectList{info.subject_list}  filesep filesep Deci.Analysis.LocksTitle{info.Lock} filesep Deci.Analysis.CondTitle{info.Cond}],'Pe');

mkdir([Deci.Folder.Analysis filesep 'Extra' filesep 'PseudoR' filesep Deci.SubjectList{info.subject_list}  filesep filesep Deci.Analysis.LocksTitle{info.Lock}])
save([Deci.Folder.Analysis filesep 'Extra' filesep 'PseudoR' filesep Deci.SubjectList{info.subject_list}  filesep filesep Deci.Analysis.LocksTitle{info.Lock} filesep Deci.Analysis.CondTitle{info.Cond}],'PseudoR');

mkdir([Deci.Folder.Analysis filesep 'Extra' filesep 'AIC' filesep Deci.SubjectList{info.subject_list}  filesep filesep Deci.Analysis.LocksTitle{info.Lock}])
save([Deci.Folder.Analysis filesep 'Extra' filesep 'AIC' filesep Deci.SubjectList{info.subject_list}  filesep filesep Deci.Analysis.LocksTitle{info.Lock} filesep Deci.Analysis.CondTitle{info.Cond}],'AIC');

% 
% for blk = 1:size(Best,3)
%     
%     figure;
%     
%     
%     plot(Actions{blk} == params.Actions(1))
%     
%     Pb = [];
%     for m = 1:size(Best,1)
%         for t = 1:1000
%             Pb(t,:) = Simu(P{m,I(m,1,blk),blk});
%         end
%         hold on
%         plot(mean(Pb,1))
%     end
%     
%     legend(['Actual Data'],...
%     ['SimpleQ (' num2str(Best(1,blk)) ')' ], ...
%     ['FeedbackQ(' num2str(Best(2,blk)) ')' ],...
%     ['InteractiveQ (' num2str(Best(3,blk)) ')' ]);
% 
% title(['block ' num2str(blk)])
% 
% end



    function [LLE,qout,P,PE] = SimpleQ(q,a,r,alp,beta)
        
        %[qout,PE,P,LLE] =
        
        P = [];
        PE = [];
        qout = [];
        
        for block = 1:length(a)
            
            actions = sort(unique(a{block}));
            
            for Act = 1:length(a{block})
                
                which = find(a{block}(Act) == actions);
                
                PE(end+1) = (r{block}(Act) -q(Act,which) );
                q(Act+1,which) = q(Act,which) + alp*PE(end);
                q(Act+1,find(a{block}(Act) ~= actions))  = q(Act,find(a{block}(Act) ~= actions));
                
                P(end+1) = exp(beta*q(Act+1,which))/sum(exp(beta*q(Act+1,:)));
                qout(end+1) = q(Act+1,which);
                
                
            end
        end
        
        LLE = -nansum(log(P));
        
    end

    function [LLE,qout,P,PE] = FeedbackQ(q,a,r,alpP,alpN,beta)
        
         P = [];
         PE = [];
         qout = [];
         
         for block = 1:length(a)
             
             actions = sort(unique(a{block}));
             
             for Act = 1:length(a{block})
                 
                 which = find(a{block}(Act) == actions);
                 
                 PE(end+1) = (r{block}(Act) - q(Act,which));
                 
                 if PE(end) > 0
                     q(Act+1,which) = q(Act,which) + alpP*PE(end);
                 else
                     q(Act+1,which) = q(Act,which) + alpN*PE(end);
                 end
                 q(Act+1,find(a{block}(Act) ~= actions))  = q(Act,find(a{block}(Act) ~= actions));
                 
                 P(end+1) = exp(beta*q(Act+1,which))/sum(exp(beta*q(Act+1,:)));
                 qout(end+1) = q(Act+1,which);
                 
             end
         end
        
        LLE = -nansum(log(P));
        
    end

    function [LLE,qout,P,PE] = InteractiveQ(q,a,r,alpPP,alpNP,alpPR,alpNR,beta)
        
                 P = [];
        qout = [];
        PE = [];
        
         for block = 1:length(a)
        
        actions = sort(unique(a{block}));
        
        for Act = 1:length(a{block})
            
            which = find(a{block}(Act) == actions);
            
            PE(end+1) = (r{block}(Act) - q(Act,which));
            
            if PE(end) > 0 && [r{block}(Act) > 0 || [r{block}(Act) == 0 && mean(unique(r{block})) < 0]]
                q(Act+1,which) = q(Act,which) + alpPR*PE(end);
            elseif PE(end) > 0 && r{block}(Act) < 0 || [r{block}(Act) == 0 && mean(unique(r{block})) > 0]
                q(Act+1,which) = q(Act,which) + alpPP*PE(end);
            elseif PE(end) < 0 && r{block}(Act) > 0 || [r{block}(Act) == 0 && mean(unique(r{block})) < 0]
                q(Act+1,which) = q(Act,which) + alpNR*PE(end);
            elseif PE(end) < 0 && r{block}(Act) < 0 || [r{block}(Act) == 0 && mean(unique(r{block})) < 0]
                q(Act+1,which) = q(Act,which) + alpNP*PE(end);
            end
            
            q(Act+1,find(a{block}(Act) ~= actions))  = q(Act,find(a{block}(Act) ~= actions));
            
            P(end+1) = exp(beta*q(Act,which))/sum(exp(beta*q(Act,:)));
            qout(end+1) = q(Act+1,which);
            
        end
         end
         
        LLE = -nansum(log(P));
    end

    function [LLE,qout,P,PE] = ModelQ(q,a,r,alpP,alpN,betaP,betaR)
        
        actions = sort(unique(a));
        
        for Act = 1:length(a)
            
            which = find(a(Act) == actions);
            
            PE(Act) = (r(Act) - q(Act,which));
            
            if PE(Act) > 0
                q(Act+1,which) = q(Act,which) + alpP*PE(Act);
            else
                q(Act+1,which) = q(Act,which) + alpN*PE(Act);
            end
            
            q(Act+1,find(a(Act) ~= actions))  = q(Act,find(a(Act) ~= actions));
            
            if r(Act) > 0
                P(Act) = exp(betaR*q(Act+1,which))/sum(exp(betaR*q(Act+1,:)));
            elseif r(Act) < 0
                P(Act) = exp(betaP*q(Act+1,which))/sum(exp(betaP*q(Act+1,:)));
            end
            
            qout(Act) = q(Act+1,which);

        end
        
         LLE = -nansum(log(P));
    end

    function B = Simu(A)
        
        for act = 1:length(A)
            if ~isnan(A(act))
                
                B(act) = rand < A(act);
                
            else
                B(act) = 0;
            end
        end
        
    end
end