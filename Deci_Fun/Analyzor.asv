function Analyzor(Deci)

if ~isfield(Deci.Analysis,'ArtifactReject')
    Deci.Analysis.ArtifactReject = 0;
    Warning('Parameter for ArtifactReject not found, presuming not wanted')
end

if ~isfield(Deci.Analysis,'Channels')
    Deci.Analysis.Channels = 'all';
    Warning('Parameter for Channels not found, presuming all')
end


if ~isfield(Deci.Analysis,'Laplace')
    Deci.Analysis.Laplace = 0;
    Warning('Parameter for Laplace not found, presuming not wanted')
end


if  isempty(Deci.Analysis.Freq) &&  ~Deci.Analysis.ERP
    error('No analysis step was called for.')
end


if Deci.PCom
    Savelog = ParRefresh([]);
    Freqlog = ParRefresh([]);
end

for subject_list = 1:length(Deci.SubjectList)
    
    if Deci.PCom
        Savelog = ParRefresh(Savelog,'Finished');
        Freqlog = ParRefresh(Freqlog,'Read');
    end
    
    data = [];
    load([Deci.Folder.Preproc filesep Deci.SubjectList{subject_list}]);
    
    
    if Deci.Analysis.Laplace
        [elec.label, elec.elecpos] = elec_1020select(data.label);
        ecfg.elec = elec;
        data = ft_scalpcurrentdensity(ecfg, data);
    end
    
    trialevents = unique(data.trialinfo,'stable');
    
    for Cond = 1:length(trialevents)
        
        
        if Deci.Analysis.ArtifactReject
            
            if exist([Deci.Folder.Artifact filesep Deci.SubjectList{subject_list} filesep num2str(Cond) '.mat']) == 2
                artifacts = [];
                load([Deci.Folder.Artifact filesep Deci.SubjectList{subject_list} filesep num2str(Cond) '.mat'],'artifacts');
            else
                error(['artifacts not found for ' Deci.SubjectList{subject_list}]);
            end
        else
            artifacts = logical(ones([1 length(find(data.trialinfo==trialevents(Cond)))]))';
        end
        
        cfg = [];
        cfg.trials = find(data.trialinfo==trialevents(Cond));
        cfg.trials = cfg.trials(artifacts);
        
        redefine = 0;
        if exist([Deci.Folder.Version  filesep 'Redefine' filesep Deci.SubjectList{subject_list}  '.mat']) == 2
            redefine = 1;
            retrl = [];
            load([Deci.Folder.Version  filesep 'Redefine' filesep Deci.SubjectList{subject_list}  '.mat']);
        end
        
        
        if Deci.Analysis.ERP
            
            if redefine
                cfg.offset = retrl;
                cfg.shift =  Deci.Analysis.Redefine.ERPToi;
                datatime = ft_datashift(cfg,data);
            else
                datatime = data;
            end
            
            cfg.vartrllength = 2;
            time =  ft_timelockanalysis(cfg, datatime);
            clear datatime;
            
            mkdir([Deci.Folder.Analysis filesep 'Volt_ERP' filesep Deci.SubjectList{subject_list}])
            label = rmfield(time,'avg');
            save([Deci.Folder.Analysis filesep 'Volt_ERP' filesep Deci.SubjectList{subject_list} filesep num2str(Cond)],'time','label');
            
        end
        
        if ~isempty(Deci.Analysis.Freq)
            
            if ~isfield(Deci.Analysis.Freq,'Toi')
                Deci.Analysis.Toi = [-inf inf];
                Warning('Parameter for Toi not found, presuming [-inf inf]')
            end
            
            fcfg = Deci.Analysis.Freq;
            fcfg.toi = Deci.Analysis.Freq.Toi(1):round(diff([data.time{1}(1) data.time{1}(2)]),5):Deci.Analysis.Freq.Toi(2);
            fcfg.output='fourier';
            fcfg.pad = 'maxperlen';
            fcfg.scc = 0;
            fcfg.keeptapers = 'no';
            fcfg.keeptrials = 'yes';
            fcfg.trials = cfg.trials;
            
            Analysis = 1;
            
               
                
                
                if ~isfield(Deci.Analysis.Freq,'Redefine')
                    
                    
                    Fourier =  RedefineFreq(Deci,retrl,data,artifacts,Cond,trialevents,subject_list)

                else
                    
                    if Deci.PCom
                        Freqlog(end+1) = parfeval(@ft_freqanalysis,1,Ifcfg, data);
                    else
                        Fourier = rmfield(ft_freqanalysis(Ifcfg, data),'cfg');
                    end
                end
                
                
                if Analysis
                    if Deci.PCom
                        [~,Fourier] = fetchNext(Freqlog,5);
                        Savelog(end+1) = parfeval(@SaveFreq,0,Fourier,Deci.SubjectList{subject_list},num2str(Cond),Deci.Analysis.Channels);
                        clear Fourier;
                    else
                        SaveFreq(Fourier,Deci.SubjectList{subject_list},num2str(Cond),Deci.Analysis.Channels);
                    end
                    
                end

        end
        
        clear data
        
    end
    
end


